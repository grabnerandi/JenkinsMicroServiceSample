{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Dynatrace Jenkins MicroService Tutorial",

    "Parameters": {
        "DynatraceTenantURL": {
            "Description": "Your full Dynatrace Tenant URL. For SaaS it is e.g: http://<YOURTENANTID>.live.dynatrace.com. For Managed something like https://yourserver/e/abcdefgh-1234-5678-abcd-55a7265f572f",
            "Type": "String",
            "Default": "YOURDYNATRACETENANTURL"
        },
        "DynatraceAPIToken": {
            "Description": "Your Dynatrace API Token. If you dont have one create one first in your Dynatrace Web UI via Settings -> Integration -> Dynatrace API",
            "Type": "String",
            "Default": "YOURTOKEN"
        },
        "DynatraceOneAgentURL": {
            "Description": "Full Download Script URL. Go to Deploy Dynatrace -> Start Installation -> Linux and cope the FULL URL in the wget command and PASTE it here",
            "Type": "String",
            "Default": "YOURFULLDOWNLOADURL"
        },
        "KeyName": {
            "Description": "Name of Existing EC2 Key Pair which we will use to launch new EC2 Instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "Must be the name of an existing Key Pair"
        },
        "InstanceType": {
            "Description": "Instance Types for the EC2 Instances we create for Staging and Production",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": ["t2.micro", "t2.small", "t2.medium"]
        },
        "YourGitHubRepo": {
            "Description": "Your Cloned GitHub Repo with that Microservice Sample App",
            "Type": "String",
            "Default": "https://github.com/grabnerandi/JenkinsMicroServiceSample"
        }
    },

    "Mappings": {
        "RegionMap": {
            "us-east-1": {
                "AMI": "ami-97785bed"
            },
            "us-east-2": {
                "AMI": "ami-f63b1193"
            },
            "us-west-1": {
                "AMI": "ami-824c4ee2"
            },
            "us-west-2": {
                "AMI": "ami-f2d3638a"
            }
        }
    },

    "Resources": {
        "SSMParamDtTenantTUrl": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
               "Name": "DT_JENKINS_TENANT_URL",
               "Type": "String",
               "Value": { "Ref" : "DynatraceTenantURL"},
               "Description": "Dynatrace Tenant URL including your Environment in case you run managed used for Jenkins Tutorial"
            }
        },
        "SSMParamDtApiToken": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
               "Name": "DT_JENKINS_API_TOKEN",
               "Type": "String",
               "Value": { "Ref" : "DynatraceAPIToken"},
               "Description": "Dynatrace API Token used for Jenkins Tutorial"
            }
        },

        "DynatraceJenkinsEC2InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "InstanceProfileName": "DynatraceJenkinsEC2InstanceProfile",
                "Path": "/",
                "Roles": [{
                    "Ref": "DynatraceJenkinsEC2InstanceProfileRole"
                }]
            }
        },
        "DynatraceJenkinsEC2InstanceProfileRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "DynatraceJenkinsEC2InstanceProfileRole",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        }
                    }]
                },
                "Path": "/"
            }
        },

        "SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP access via port 80 and SSH access.",
                "GroupName": "Dynatrace Jenkins Microservices Tutorial Security Group",
                "SecurityGroupIngress": [{
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8080",
                        "ToPort": "8080",
                        "CidrIp": "0.0.0.0/0"
                    },                    
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "JenkinsInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": ["RegionMap", {
                        "Ref": "AWS::Region"
                    }, "AMI"]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "IamInstanceProfile": {
                    "Ref": "DynatraceJenkinsEC2InstanceProfile"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SecurityGroups": [{
                    "Ref": "SecurityGroup"
                }],
                "Tags": [{
                        "Key": "Environment",
                        "Value": "JenkinsTutorial"
                    },
                    {
                        "Key": "Name",
                        "Value": "JenkinsInstance"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["", [
                            "#!/bin/bash -x\n",
                            "# First: we download and install the Dynatrace OneAgent\n",
                            "yum update -y\n",
                            "yum install ruby wget -y\n",
                            "yum install git -y\n",
                            "wget --no-check-certificate -O Dynatrace-OneAgent-Linux.sh \"", {
                                "Ref": "DynatraceOneAgentURL"
                            }, "\"\n",
                            "sudo /bin/sh Dynatrace-OneAgent-Linux.sh APP_LOG_CONTENT_ACCESS=1\n",

                            "# Second: We download JDK8, set it as default java and then install Jenkins\n",
                            "yum install java-1.8.0-openjdk -y",
                            "alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java",
                            "wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo",
                            "rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key",
                            "yum install jenkins -y",
                            "service jenkins start",
                            "cat /var/lib/jenkins/secrets/initialAdminPassword",
                            
                            "# Last: Get the latest CloudFormation package",
                            "yum update -y aws-cfn-bootstrap",
                            "# Start cfn-init",
                            "/opt/aws/bin/cfn-init -s ${AWS::StackId} -r JenkinsInstance --region ${AWS::Region} || error_exit 'Failed to run cfn-init'",
                            "# Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata",
                            "/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'",
                            "# All done so signal success",
                            "/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource JenkinsInstance --region ${AWS::Region}"                            
                        ]]
                    }
                }
            }
        },

        "MicroserviceInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": ["RegionMap", {
                        "Ref": "AWS::Region"
                    }, "AMI"]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "IamInstanceProfile": {
                    "Ref": "DynatraceJenkinsEC2InstanceProfile"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SecurityGroups": [{
                    "Ref": "SecurityGroup"
                }],
                "Tags": [{
                        "Key": "Environment",
                        "Value": "JenkinsTutorial"
                    },
                    {
                        "Key": "Name",
                        "Value": "MicroserviceInstance"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["", [
                            "#!/bin/bash -x\n",
                            "# First: we download and install the Dynatrace OneAgent - TODO: Make sure you download YOUR OneAgent for your Dynatrace Tenant\n",
                            "wget --no-check-certificate -O Dynatrace-OneAgent-Linux.sh \"", {
                                "Ref": "DynatraceOneAgentURL"
                            }, "\"\n",
                            "sudo /bin/sh Dynatrace-OneAgent-Linux.sh APP_LOG_CONTENT_ACCESS=1\n",

                            "# Last: Get the latest CloudFormation package",
                            "yum update -y aws-cfn-bootstrap",
                            "# Start cfn-init",
                            "/opt/aws/bin/cfn-init -s ${AWS::StackId} -r MicroserviceInstance --region ${AWS::Region} || error_exit 'Failed to run cfn-init'",
                            "# Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata",
                            "/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'",
                            "# All done so signal success",
                            "/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource MicroserviceInstance --region ${AWS::Region}"
                        ]]
                    }
                }
            }
        }
    },

    "Outputs": {
        "MyStackRegion": {
            "Value": {
                "Ref": "AWS::Region"
            },
            "Description": "The region where the stack was created."
        },
        "JenkinsInstance": {
            "Value": {
                "Fn::GetAtt": ["JenkinsInstance", "PublicDnsName"]
            },
            "Description": "The Public DNS of your Jenkins System"
        },
        "MicroserviceInstance": {
            "Value": {
                "Fn::GetAtt": ["MicroserviceInstance", "PublicDnsName"]
            },
            "Description": "The Public DNS of your Deployed Microservices"
        }
    }
}